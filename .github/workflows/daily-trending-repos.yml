name: Daily Trending Repositories Update

on:
  schedule:
    - cron: '0 1 * * *'  # Run daily at 01:00 UTC
  workflow_dispatch:      # Allow manual triggering

jobs:
  update-trending-repos:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4
          
      - name: Create trending repos script
        run: |
          cat > scripts/update_trending_repos.py << 'EOL'
          #!/usr/bin/env python3
          """
          Script to update both trending repositories sections in the README.md file.
          """
          
          import re
          import requests
          from bs4 import BeautifulSoup
          
          def get_trending_repos(topic=None):
              """Get trending repositories from GitHub.
              
              Args:
                  topic: Optional topic to filter repositories by
              """
              trending_repos = []
              try:
                  # Set URL based on topic
                  if topic:
                      url = f"https://github.com/topics/{topic}?o=desc&s=stars"
                  else:
                      url = "https://github.com/trending?since=daily"
                  
                  headers = {
                      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
                  }
                  response = requests.get(url, headers=headers, timeout=10)
                  
                  if response.status_code == 200:
                      soup = BeautifulSoup(response.text, "html.parser")
                      
                      # Different selectors based on URL
                      if topic:
                          repo_items = soup.select("article.border")
                      else:
                          repo_items = soup.select(".Box-row")
                      
                      for item in repo_items[:7]:  # Get top 7 repos
                          if topic:
                              name_elem = item.select_one("h3 a:last-child")
                              desc_elem = item.select_one("div.px-3 > p")
                              stars_elem = item.select_one("a.social-count")
                              lang_elem = item.select_one("span[itemprop='programmingLanguage']")
                          else:
                              name_elem = item.select_one("h2 a")
                              desc_elem = item.select_one("p")
                              stars_elem = item.select_one("a[href*='stargazers']")
                              lang_elem = item.select_one("span[itemprop='programmingLanguage']")
                          
                          if name_elem and desc_elem:
                              if topic:
                                  full_name = name_elem.text.strip()
                                  repo_url = "https://github.com" + name_elem["href"]
                              else:
                                  full_name = name_elem.text.strip().replace("\n", "").replace(" ", "")
                                  repo_url = "https://github.com" + name_elem["href"]
                              
                              description = desc_elem.text.strip()
                              stars = stars_elem.text.strip() if stars_elem else "N/A"
                              language = lang_elem.text.strip() if lang_elem else "N/A"
                              
                              trending_repos.append({
                                  "name": full_name,
                                  "url": repo_url,
                                  "description": description,
                                  "stars": stars,
                                  "language": language
                              })
                  
              except Exception as e:
                  print(f"Error fetching trending repos: {e}")
              
              return trending_repos
          
          def update_readme_trending_section(trending_repos, section_title, emoji):
              """Update a trending repositories section in the README.
              
              Args:
                  trending_repos: List of trending repositories
                  section_title: Title of the section to update
                  emoji: Emoji to use in the section title
              """
              try:
                  with open("README.md", "r", encoding="utf-8") as f:
                      content = f.read()
                  
                  # Find the trending repos section - use a more precise pattern that won't affect other sections
                  section_start_pattern = f"## {emoji} {section_title}\n\n"
                  section_end_pattern = "\n\n##"
                  
                  # Find the start position of the section
                  start_pos = content.find(section_start_pattern)
                  if start_pos == -1:
                      print(f"Could not find section '{section_title}' in README.md")
                      return
                      
                  # Find the end position of the section
                  end_pos = content.find(section_end_pattern, start_pos)
                  if end_pos == -1:
                      print(f"Could not find end of section '{section_title}' in README.md")
                      return
                  
                  # Extract the section to replace
                  section_to_replace = content[start_pos:end_pos + 2]  # +2 to include the newlines
                  
                  # Create new trending section content
                  new_section = f"## {emoji} {section_title}\n\n"
                  new_section += f"These are the most popular {section_title.lower()} on GitHub right now:\n\n"
                  new_section += "| Repository | Description | Stars | Language |\n"
                  new_section += "| --- | --- | --- | --- |\n"
                  
                  for repo in trending_repos:
                      new_section += f"| [{repo['name']}]({repo['url']}) | {repo['description']} | {repo['stars']} | {repo['language']} |\n"
                  
                  new_section += "\n\n##"  # Add the ending marker
                  
                  # Replace only the specific section without affecting the rest of the README
                  updated_content = content.replace(section_to_replace, new_section)
                  
                  # Make a backup of the original README before writing changes
                  with open("README.md.bak", "w", encoding="utf-8") as f:
                      f.write(content)
                  
                  # Write the updated content
                  with open("README.md", "w", encoding="utf-8") as f:
                      f.write(updated_content)
                  
                  print(f"Updated {section_title} section in README.md")
              
              except Exception as e:
                  print(f"Error updating README: {e}")
                  # Restore from backup if something went wrong
                  try:
                      with open("README.md.bak", "r", encoding="utf-8") as f:
                          backup_content = f.read()
                      with open("README.md", "w", encoding="utf-8") as f:
                          f.write(backup_content)
                      print("Restored README.md from backup after error")
                  except Exception:
                      print("Failed to restore README.md from backup")
          
          def main():
              """Main function to update trending repositories."""
              # Update general trending repositories
              print("Fetching trending GitHub repositories...")
              trending_repos = get_trending_repos()
              if trending_repos:
                  print(f"Found {len(trending_repos)} trending repositories")
                  update_readme_trending_section(trending_repos, "Trending GitHub Repositories", "ðŸ”¥")
              else:
                  print("No trending repositories found")
              
              # Update API trending repositories
              print("Fetching trending GitHub API repositories...")
              trending_api_repos = get_trending_repos("api")
              if trending_api_repos:
                  print(f"Found {len(trending_api_repos)} trending API repositories")
                  update_readme_trending_section(trending_api_repos, "Trending GitHub API Repositories", "ðŸ“ˆ")
              else:
                  print("No trending API repositories found")
          
          if __name__ == "__main__":
              main()
          EOL
          chmod +x scripts/update_trending_repos.py
          
      - name: Run trending repos script
        run: python scripts/update_trending_repos.py
        
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "Daily trending repos update [automated] $(date +'%Y-%m-%d')" || echo "No changes to commit"
          git push
